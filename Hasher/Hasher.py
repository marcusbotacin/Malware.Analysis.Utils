#!/usr/bin/env python
# Allow shell without calling py directly

# Marcus Botacin - Unicamp - 2017
# Calculates all binary hashes
# Implemented using hashlib

# Import Block

import sys      # args
import hashlib	# hash util - MDs,SHAs
import zlib     # hash util - CRCs
import ssdeep   # hash util - LSH

# hash utils
def hash_info(path):
	malwr=open(path,"rb").read()
	hash_ssdeep=""+str(ssdeep.hash(malwr))+""
	crc32=""+str(hex(zlib.crc32(malwr)% 2**32))+""
	md5=""+str(hashlib.md5(malwr).hexdigest())+""
	sha1=""+str(hashlib.sha1(malwr).hexdigest())+""
	sha224=""+str(hashlib.sha224(malwr).hexdigest())+""
	sha256=""+str(hashlib.sha256(malwr).hexdigest())+""
	sha384=""+str(hashlib.sha384(malwr).hexdigest())+""
	sha512=""+str(hashlib.sha512(malwr).hexdigest())+""
	return {'SSDEEP':hash_ssdeep,'CRC32':crc32,'MD5':md5,'SHA1':sha1,'SHA224':sha224,'SHA256':sha256,'SHA384':sha384,'SHA512':sha512}

# Help
def help():
	print("No lineargs supported. Only hardcoded data")

# Entry Point

# Check who is calling
# By now, only direct calls are supported

if __name__ == '__main__':

	if(len(sys.argv)==2):
	# when having args
            print("Hashes of %s" % sys.argv[1])
            hashes=hash_info(sys.argv[1])
            for indice in hashes:
                print("[%s]\t:\t%s" % (indice,hashes[indice])).expandtabs(5)
	#else, help!
	else:
	    help()
